 &EBSDdata
! template file for the EMEBSD program
!
! distance between scintillator and illumination point [microns]
 L = 15000.0,
! tilt angle of the camera (positive below horizontal, [degrees])
 thetac = 10.0,
! CCD pixel size on the scintillator surface [microns]
 delta = 50.0,
! number of CCD pixels along x and y
 numsx = 640,
 numsy = 480,
! pattern center coordinates in units of pixels
 xpc = 0.0,
 ypc = 0.0,
! angle between normal of sample and detector
 omega = 0.0,
! transfer lens barrel distortion parameter
 alphaBD = 0.0,
! energy range in the intensity summation [keV]
 energymin = 5.0,
 energymax = 20.0,
! include a realistic intensity background or not ... 
 includebackground = 'y',
! name of angle file (euler angles or quaternions); path relative to EMdatapathname
 anglefile = 'testeuler.txt',
! does this file have only orientations ('orientations') or does it also have pattern center and deformation tensor ('orpcdef')
! if anglefiletype = 'orpcdef' then each line in the euler input file should look like this: (i.e., 15 floats)
!   55.551210  58.856774  325.551210  0.0  0.0  15000.0  1.00 0.00 0.00 0.00 1.00 0.00 0.00 0.00 1.00
!   <-   Euler angles  (degrees)  ->  <- pat. ctr.   ->  <- deformation tensor in column-major form->
!
 anglefiletype = 'orientations',
! 'tsl' or 'hkl' Euler angle convention parameter
 eulerconvention = 'tsl',
! name of EBSD master output file; path relative to EMdatapathname
 masterfile = 'master.h5',
! name of Monte Carlo output file; path relative to EMdatapathname
 energyfile = 'MC.h5',
! name of output file; path relative to EMdatapathname
 datafile = 'EBSDout.h5',
! bitdepth '8bit' for [0..255] bytes; 'float' for 32-bit reals; '##int' for 32-bit integers with ##-bit dynamic range
! e.g., '9int' will get you 32-bit integers with intensities scaled to the range [ 0 .. 2^(9)-1 ]; 
! '17int' results in the intensity range [ 0 .. 2^(17)-1 ]
 bitdepth = '8bit',
 ! incident beam current [nA]
 beamcurrent = 150.0,
! beam dwell time [micro s]
 dwelltime = 100.0,
! binning mode (1, 2, 4, or 8)
 binning = 1,
! should we perform an approximate computation that includes a lattice distortion? ('y' or 'n')
! This uses a polar decomposition of the deformation tensor Fmatrix which results in
! an approcimation of the pattern for the distorted lattice; the bands will be very close
! to the correct position in each pattern, but the band widths will likely be incorrect.
 applyDeformation = 'n'
! if applyDeformation='y' then enter the 3x3 deformation tensor in column-major form
! the default is the identity tensor, i.e., no deformation
 Ftensor = 1.D0, 0.D0, 0.D0, 0.D0, 1.D0, 0.D0, 0.D0, 0.D0, 1.D0,
! intensity scaling mode 'not' = no scaling, 'lin' = linear, 'gam' = gamma correction
 scalingmode = 'not',
! gamma correction factor
 gammavalue = 1.0,
! should a circular mask be applied to the data? 'y', 'n'
 maskpattern = 'n',
! number of threads (default = 1)
 nthreads = 1,
 /
